{"backend_state":"init","connection_file":"/projects/bf0b3665-37be-49f4-895a-fd6a70d9dc4a/.local/share/jupyter/runtime/kernel-3719034e-5443-4f06-9494-c803b2d492f2.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"Mastermind.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"163d27","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2a5925","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4b4a98","input":"#prompt the user for input and set the guess to an integer.\n\n","metadata":{"id":"djIIncFBFQ1_"},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"55f9d6","input":"#get a four digit integer between 1000 and 9999 and set it to a variable.\n","metadata":{"id":"2IAA6A4ZnLXx"},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"566241","input":"## Step 2: Get the user's guess\n\nThe user is now going to try to guess the 4-digit number. You should get `input()` from the user and set their guess to an integer. \n\nIf you run into issues, try to google how to get integer input from a user in python!\n\n","metadata":{"id":"yl0IqDTEEzHB"},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"60904b","input":"","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7213cc","input":"my_integer = int(my_decimal) #convert the decimal into an integer\nprint(\"my_integer:\", my_integer)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6GbIe7mMHeOz","outputId":"9cfb5b3d-61ab-4f36-a9a8-866849e6be80"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8d2e9f","input":"my_string = str(my_integer) #convert the integer into a string.\nprint(\"string_number:\", my_string)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5U_EISMqHeG0","outputId":"b527d926-d35e-4484-8707-19f6eb82e619"},"output":{"0":{"name":"stdout","output_type":"stream","text":"string_number: 150000\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b09bf1","input":"## Step 1: Setting a four digit number\nFor this step, our program needs to set a random 4-digit number for the user to guess. It would make sense that this number is any number inbetween 1000 and 9999 right? \n\nWe recommend checking out how to get random numbers in python. Maybe a google search of \"Get a random number in a certain range python\" is a good start. You should set this number to a variable to save for later. If you are stuck, look back at our old projects","metadata":{"id":"MywCq7XjDo7z"},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b4773d","input":"","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ef3856","input":"for i in range(len(my_string)):\n  print(my_string[i])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P2n9yz-9Hd-V","outputId":"0d4f2a26-314b-4720-a4ef-6ecbcaffc2ed"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n5\n0\n0\n0\n0\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fdb062","input":"print(my_string[0], my_string[1], my_string[2], my_string[3], my_string[4], my_string[5])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VuYJEIrHHtvS","outputId":"92e67438-8377-4c41-9443-19f5ddff9a4e"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1 5 0 0 0 0\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"5b5e8e","input":"# check if the user's guess is correct\n\n#Otherwise, reveal which digits or numbers the user got correct \\- HINT: use string typecasting to determine which specific numbers are correct!\n","metadata":{"id":"ustwEFoqFkWO"},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"b54316","input":"# Welcome to **MASTERMIND**\n\nToday we will be creating Mastermind, a classic game similar to Wordle. The steps of Mastermind are as follows:\n\n*   The computer plays first by setting a 4-digit number.\n*   The user now tries their first attempt at guessing the number.\n*   If the user succeeds in their first attempt (despite odds which are highly unlikely) they win the game and is crowned Mastermind! If not, then the computer hints by revealing which digits or numbers the user got correct.\n*   The game continues till the user eventually is able to guess the number entirely.\n\n\n","metadata":{"id":"FIl5ePMRnNbH"},"output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (4173578738.py, line 3)","output_type":"error","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [1]\u001b[0;36m\u001b[0m\n\u001b[0;31m    Today we will be creating Mastermind, a classic game similar to Wordle. The steps of Mastermind are as follows:\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"9fac99","input":"#start with a decimal\nmy_decimal = 150000.0\nprint(\"my_decimal:\", my_decimal)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MJ2biGAUG77u","outputId":"9b0571f0-f867-4fac-e2bf-84fec90378bb"},"output":{"0":{"name":"stdout","output_type":"stream","text":"my_decimal: 150000.0\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"6e41a8","input":"# Loop until the number guessed is equal to the hidden random number\n\n# in each loop, process the user's guess and reveal which digits or numbers the user got correct each round. \n\n2+2","metadata":{"id":"r7xV_F6pSiAS"},"output":{"0":{"data":{"text/plain":"4"},"exec_count":3,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9855fd","input":"import random\nnumber = random.randint(1000, 9999)\nrealNum = str(number)\ncount=0\ni=0;\nwhile usernum!=realNum:\n    usernum = input(\"Enter 4 digit number guess\")\n    op=\"\"\n    if usernum[i]!=realNum[i]:\n        op+=\"X\"\n        i+=1\n    if usernum[i]==realNum[i]:\n        op+=realNum[i]\n        i+=1\n    count+=1\n    print(\"Your number is \" + op + \" Try again!\")\nprint(\"You got the number on the first try!\")","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"1111"},"1":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2222"},"3":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2333"},"5":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2344"},"6":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream"}}},"id":"28KLAYM7SlPC"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"1111"},"1":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2222"},"2":{"name":"stdout","output_type":"stream","text":"Your number is 2XXX Try again!\n"},"3":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2333"},"4":{"name":"stdout","output_type":"stream","text":"Your number is 23XX Try again!\n"},"5":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream","value":"2344"},"6":{"name":"input","opts":{"password":false,"prompt":"Enter 4 digit number guess"},"output_type":"stream"},"7":{"name":"stdout","output_type":"stream","text":"Your number is 23XX Try again!\n"},"8":{"ename":"KeyboardInterrupt","evalue":"Interrupted by user","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m usernum\u001b[38;5;241m!=\u001b[39mrealNum:\n\u001b[1;32m     10\u001b[0m     op \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m---> 11\u001b[0m     usernum \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mEnter 4 digit number guess\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     12\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(usernum)):\n\u001b[1;32m     13\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m usernum[i]\u001b[38;5;241m!=\u001b[39mrealNum[i]:\n","File \u001b[0;32m~/enter/lib/python3.9/site-packages/ipykernel/kernelbase.py:1075\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[1;32m   1072\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[1;32m   1073\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1074\u001b[0m     )\n\u001b[0;32m-> 1075\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1079\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1080\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/enter/lib/python3.9/site-packages/ipykernel/kernelbase.py:1120\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1117\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m   1118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1119\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[0;32m-> 1120\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n\u001b[1;32m   1121\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1122\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"162f42","input":"The reason why strings are powerful for processing numbers digit by digit is because they can be accessed like lists.","metadata":{"id":"G823cceuHqRv"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"3180b2","input":"## Step 3: See if the user succeeds in first try\n\nIn this part, we need to check `if` the user's guess is correct and equal to the random four-digit integer the computer generated.\n\nIf the user's guess is correct, you should output something like: \n\n> \"Great! You only needed 1 try! You're a Mastermind!\"\n\nElse, then the computer hints by revealing which digits or numbers the user got correct.\n\n","metadata":{"id":"gxclhNPSFYdB"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"431f7e","input":"## Step 4: Continue in a loop.\n\nWhen our user is wrong, we need to let them guess again and keep a `count` of how many guesses they have used so far. We will keep looping until our user's guess is equal to the hidden number.\n\nFor repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of  loop would be better for this case.\n\n","metadata":{"id":"pSDfXUdfGD1u"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"8b30b2","input":"If you want to go further, you can find the next instructions here - https://www.geeksforgeeks.org/mastermind-game-using-python/\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"954ac9","input":"## Some Python Background: Typecasting & Strings\n\nIn this project, we will most likely use some typecasting. This is where you convert (or *cast*) a piece of data to a certain data type, such as a string or integer. Some of the code below could be useful for you on this project. \n\n","metadata":{"id":"PyCFDcrEGhpg"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"a82055","input":"## Put it all together\n\nCombine all of your code from the previous steps below to make one smooth running program that will let a user play mastermind!\n\n","metadata":{"id":"MO1CHHGrSjHn"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"e34c0f","input":"Typecasting lets us convert a piece of data to a different data type. \n\n","metadata":{"id":"Q3-oqvm8H6fI"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"e8e157","input":"We may want to convert to different data types for processing data. Strings are one way to process numbers digit by digit.","metadata":{"id":"86uGwcGTH_Hb"},"pos":5,"type":"cell"}
{"id":0,"time":1654710848297,"type":"user"}
{"last_load":1654710840624,"type":"file"}